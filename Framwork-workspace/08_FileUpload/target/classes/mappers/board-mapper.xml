<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> <!-- xml 파일의 유효성 체크를 위한 부분 -->
<mapper namespace="board">
	
	<!-- 게시글 목록 전체 조회 -->
	<select id="selectList" resultType="board">
		SELECT *
		FROM BOARD
		ORDER BY CREATE_DATE DESC
	</select>
	
	<!-- 
		게시글 검색 기능 구현 : 키워드가 포함된 게시글을 전부 조회하겠다.
		* VO 객체로 가공을 못 할 경우는?
		- 기존에 우리가 INSERT, UPDATE, DELETE 를 하게 되면 한개의 행 기준으로 이루어짐
		(결과물도 처리된 행의 갯수로 리턴됬었음)
		=> 쿼리문을 실행하기 위해서 필요한 값들이 보통은 서로 연관된 관계였음 (VO 객체로 묶을 수 있는 관계)
		
		- SELECT 문의 경우는 관계없는 값들이 쿼리문 실행 시 여러개 필요할 경우가 종종 있음
		=> 조건이 여러개일 경우는 특히나 더더욱
		=> 그런데 우리가 MyBatis 구조상 넘겨야할 값은 항상 1개여야 함 (그래서 어찌됬든 간에 가공을 할 수 밖에 없음)
		
		[ 기존의 VO 가공 방식 ]
		한개의 행 == 해당 VO 객체 한개 
		한개의 컬럼명 == 해당 VO 객체 필드명 한개
		
		이런 경우에는 그러면?
		VO 대신에 MAP 으로 가공을 해주면 됨
		
		[ MAP 가공방식 ]
		해당 VO 객체 한개  == MAP 타입 변수 한개
		해당 VO 객체 필드명 한개 == MAP 의 키값 한개
		=> 이 개념으로 접근을 해서 가공을 하자!!
		
		
		* 정적바인딩과 동적바인딩
		(참고로 자바에서의 동적바인딩 개념과 헷갈리면 큰일남!!!!)
		- 기존 방식에서 검색 기능을 구현할 때는 조건에 따른 쿼리문들을 일일이 다 만들어야 했음.
		- MyBatis 에서는 정적바인딩 개념을 이용해서 한개의 쿼리문으로 여러 조건을 받을 수 있음
		
		${키값} : 정적바인딩 (있는 그대로의 값을 그냥 삽입)
				  쿼리가 수행될 때 ${키값} 자리에 기존의 값이 하드코딩된다.
				 column = 값 형태 (Statement)
		#{키값} : 동적바인딩 (자료형에 맞춰서 맞춤형으로 삽입)
				  쿼리가 수행될 때 #{키값} 자리에 값이 바인딩된다.
				 column = ? (기존의 위치홀더에 값이 들어가는 개념 => PreparedStatment)
		=> 그래서 보통은 이런식으로 쓰인다.
		      컬럼명에도 구멍을 뚫어야 할 경우 
		      컬럼명이 들어가야 할 자리에는 ${키값}, 리터럴이 들어가야 할 자리에는 #{키값} 이 쓰임!!
		=> 성능 상 보면 동적바인딩이 더 유리는 하겠으나
		      상황에 따라서 내가 정말 컬럼명을 메꿔야 한다던지 하는 극한의 상황일 경우에는 정적바인딩을 쓸수밖에 없음
		   (역할, 가치가 아예 달라서 비교를 못할거같다..)
	-->
	<select id="search" resultType="board" parameterType="map">
		SELECT *
		FROM BOARD
		WHERE ${type} LIKE '%' || #{keyword} || '%'
		ORDER BY CREATE_DATE DESC
	</select>
	
	<!-- 
		한개의 요청으로 게시글을 검색도 되고 전체조회도 되는 기능 
		
		- 검색일 경우 : type 이라는 키값과 keyword 라는 키값으로 검색 조건을 완성시켰음
					(만약에 Map 에서 type 이라는 키에 해당하는 밸류와 keyword 에 해당되는 밸류가
					 둘 다 존재할 경우에는 WHERE 절을 추가시켜서 검색 조건을 지정해줘)
		- 목록 전체 조회일 경우 : WHERE 절 자체가 없었음
						    (위의 조건이 아니라면 WHERE 절을 빼줘
						    => 만약에 Map 에서 type 이라는 키에 해당되는 밸류가 존재하지 않거나 또는
						                    keyword 라는 키에 해당되는 밸류가 존재하지 않을경우
						    => 둘 중 하나라도 없을때!!!!)
		=> 이 로직을 조건문으로 구현 가능
		=> 이 조건을 Controller / Service / DAO (즉, 자바 코드 단) 에 구현을 할 경우에는
		      쿼리문이 두개가 생길 것임 (검색 쿼리문 1개, 전체조회 쿼리문 1개)
		=> MyBatis 의 "동적 쿼리(동적 SQL)" 를 이용하여 
		      조건을 쿼리문 안에 걸어주면 쿼리문 한개 가지고 두가지의 기능을 구현할 수 있음!!!
		      
		* MyBatis 의 동적 쿼리 (동적 SQL)
		상황에 따라 분기 또는 반복 처리를 통해 SQL 을 동적으로 만드는 것이다.
		문법은 JSTL 태그와 거의 유사한 형태이다. if, forEach, ...
	-->
	<select id="unionList" resultType="board" parameterType="map">
		SELECT *
		FROM BOARD
		<!-- 만약에 type 이랑 keyword 에 둘다 값이 있다면 -->
		<if test="type != null and keyword != null">
		WHERE ${type} LIKE '%' || #{keyword} || '%'
		</if>
		ORDER BY CREATE_DATE DESC
	</select>
	
	<!-- 게시글 작성용 쿼리문 -->
	<insert id="write" parameterType="board">
		INSERT INTO BOARD(
						  BOARD_NO,
						  BOARD_HEAD,
						  BOARD_TITLE,
						  BOARD_WRITER,
						  BOARD_CONTENT)
		VALUES(
			   SEQ_BNO.NEXTVAL,
			   #{boardHead},
			   #{boardTitle},
			   #{boardWriter},
			   #{boardContent})
	</insert>
	
	<!-- 게시글 상세조회 -->
	<!-- 1. 조회수 증가 쿼리문 -->
	<update id="increaseCount" parameterType="int">
		UPDATE BOARD
		   SET BOARD_READ = BOARD_READ + 1
		 WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 2. 게시글 상세보기용 쿼리문 -->
	<select id="selectDetailView" resultType="board" parameterType="int">
		SELECT *
		FROM BOARD
		WHERE BOARD_NO = #{boardNo}
	</select>
	
</mapper>










